// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2022 18:41:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Count8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Count8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_;
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg JUMP_;
reg MCLEAR;
// wires                                               
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;
wire S7;

// assign statements (if any)                          
Count8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK_(CLK_),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.JUMP_(JUMP_),
	.MCLEAR(MCLEAR),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7)
);
initial 
begin 
#1000000 $finish;
end 

// CLK_
always
begin
	CLK_ = 1'b0;
	CLK_ = #500 1'b1;
	#500;
end 

// D0
always
begin
	D0 = 1'b0;
	D0 = #50000 1'b1;
	#50000;
end 

// D1
always
begin
	D1 = 1'b0;
	D1 = #50000 1'b1;
	#50000;
end 

// D2
always
begin
	D2 = 1'b0;
	D2 = #50000 1'b1;
	#50000;
end 

// D3
always
begin
	D3 = 1'b0;
	D3 = #50000 1'b1;
	#50000;
end 

// D4
always
begin
	D4 = 1'b0;
	D4 = #50000 1'b1;
	#50000;
end 

// D5
always
begin
	D5 = 1'b0;
	D5 = #50000 1'b1;
	#50000;
end 

// D6
always
begin
	D6 = 1'b0;
	D6 = #50000 1'b1;
	#50000;
end 

// D7
always
begin
	D7 = 1'b0;
	D7 = #50000 1'b1;
	#50000;
end 

// JUMP_
always
begin
	JUMP_ = 1'b0;
	JUMP_ = #25000 1'b1;
	#25000;
end 

// MCLEAR
always
begin
	MCLEAR = 1'b0;
	MCLEAR = #100000 1'b1;
	#100000;
end 
endmodule

